name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

  test:
    name: Run Frontend Tests with Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Run Frontend Tests with Coverage
        run: npm run test -- --coverage
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          
  frontend-security-tests:
    name: Frontend Security Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm install
      
      - name: Run security focused tests
        run: npm run test:security
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: coverage/
          retention-days: 14
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Run SonarQube Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      revision_name: ${{ steps.deploy.outputs.revision_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker
        run: gcloud auth configure-docker
      
      - name: Build and Push Docker Image
        id: build
        run: |
          VERSION="$(git rev-parse --short HEAD)"
          echo "Version: $VERSION"
          
          ENV_SUFFIX="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
          IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:$VERSION"
          
          docker build \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
            -t "$IMAGE_TAG" \
            -t "gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:latest" \
            .
            
          docker push "$IMAGE_TAG"
          docker push "gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:latest"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "$IMAGE_TAG" > image_tag.txt
      
      - name: Upload Image Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag
          path: image_tag.txt
          retention-days: 1

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          ENV_SUFFIX="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
          SERVICE_NAME="maams-ng-fe-$ENV_SUFFIX"
          IMAGE_TAG="$(cat image_tag.txt)"
          
          REVISION_NAME=$(gcloud run deploy $SERVICE_NAME \
            --image "$IMAGE_TAG" \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --concurrency 80 \
            --timeout 300 \
            --port 80 \
            --set-env-vars "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" \
            --set-env-vars "NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" \
            --set-env-vars "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" \
            --set-env-vars "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" \
            --set-env-vars "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            --format='value(status.latestCreatedRevisionName)')
          
          echo "revision_name=$REVISION_NAME" >> $GITHUB_OUTPUT
          
          METADATA='{
            "version": "'$VERSION'",
            "timestamp": "'$(date -u +'%Y-%m-%dT%H:%M:%SZ')'",
            "git_commit": "'${{ github.sha }}'",
            "deployed_by": "'${{ github.actor }}'",
            "revision_name": "'$REVISION_NAME'",
            "environment": "'${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}'"
          }'
          
          echo "$METADATA" > deployment-metadata.json
      
      - name: Upload Deployment Metadata
        uses: actions/upload-artifact@v4
        with:
          name: deployment-metadata-$ENV_SUFFIX-$VERSION
          path: deployment-metadata.json
          retention-days: 30

      - name: Update Domain Mapping
        if: github.ref == 'refs/heads/main'
        run: |
          gcloud beta run domain-mappings create \
            --service maams-ng-fe-prod \
            --domain maams.fisip.ui.ac.id \
            --region $REGION \
            --force-override