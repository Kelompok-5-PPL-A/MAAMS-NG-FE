name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
      - development
      - ci-cd
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
      - development
      - ci-cd

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SA_EMAIL }}

jobs:
  build:
    name: Build Next.js App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: package-lock.json
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build Application
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nextjs-app
          path: .next/
  
  test:
    name: Run Frontend Tests with Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Run Frontend Tests with Coverage
        run: npm run test -- --coverage
      
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7
          
  frontend-security-tests:
    name: Frontend Security Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm install
      
      - name: Run security focused tests
        run: npm run test:security
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: coverage/
          retention-days: 14
  
  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Run SonarQube Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        continue-on-error: true

  build_docker:
    name: Build and Push Docker Image to GCR
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker
      
      - name: Determine Environment Suffix
        id: env_suffix
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENV_SUFFIX=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV_SUFFIX=staging" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and Push Docker Image to GCR
        id: build
        run: |
          VERSION="$(git rev-parse --short HEAD)"
          ENV_SUFFIX="prod"  # Always prod for main branch
          
          IMAGE_TAG="gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:$VERSION"
          
          docker build \
            --build-arg VERSION="$VERSION" \
            --build-arg BUILD_TIME="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --build-arg GIT_COMMIT="$(git rev-parse HEAD)" \
            --build-arg NEXT_PUBLIC_API_BASE_URL="${{ secrets.NEXT_PUBLIC_API_BASE_URL }}" \
            --build-arg NEXTAUTH_URL="${{ secrets.NEXTAUTH_URL }}" \
            --build-arg NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}" \
            --build-arg GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
            --build-arg GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            -t "$IMAGE_TAG" \
            -t "gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:latest" \
            .
            
          docker push "$IMAGE_TAG"
          docker push "gcr.io/$PROJECT_ID/maams-ng-fe-$ENV_SUFFIX:latest"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "$IMAGE_TAG" > image_tag.txt
      
      - name: Upload Image Tag as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-image-tag
          path: image_tag.txt
          retention-days: 1

  deploy_netlify_staging:
    name: Deploy to Netlify Staging
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]
    
    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      
      - name: Deploy to Netlify (Staging)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: netlify deploy --dir=.next --message "Deploy from GitHub Actions"

  deploy_netlify_production:
    name: Deploy to Netlify Production
    runs-on: ubuntu-latest
    needs: [test, sonarqube-analysis]
    
    if: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install Dependencies
        run: npm install
      
      - name: Build
        run: npm run build
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
        
      - name: Install Netlify CLI
        run: npm install -g netlify-cli
      
      - name: Deploy to Netlify (Production)
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        run: netlify deploy --dir=.next --prod --message "Production deploy from GitHub Actions"